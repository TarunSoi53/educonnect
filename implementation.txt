# EduConnect - Comprehensive Implementation Documentation

## Project Overview and Vision
EduConnect is an innovative educational ecosystem designed to bridge the gap between traditional classroom learning and modern digital collaboration. The platform achieves this through:

1. **User Management System**:
   - Implements a hierarchical role-based access control (RBAC) with:
     * College Admins (Top-level management)
     * Teachers (Content creators and evaluators)
     * Students (Primary users)
   - Each role has tailored permissions and interfaces
   - Secure authentication using JWT tokens with refresh mechanism

2. **Academic Structure Management**:
   - College → Department → Section hierarchy
   - Dynamic relationship mapping between:
     * Subjects and Departments
     * Teachers and Sections
     * Students and Sections

3. **Interactive Learning Tools**:
   - AI-powered quiz generation
   - Real-time quiz conducting
   - Performance analytics

4. **Community Engagement**:
   - Art Gallery for creative expression
   - Spotlight for achievements
   - Discussion forums (via chat system)

5. **Real-time Communication**:
   - Socket.io based chat system
   - Notifications and alerts
   - Collaborative learning spaces

## Project Architecture and Implementation Approach

### Client-Side Architecture (React Frontend)

The frontend is built using React with Vite as the build tool, organized following feature-based architecture:

1. **Entry Points**:
   - `main.jsx`: Initializes the React application with:
     * Strict mode for development
     * Global CSS imports
     * Root component mounting
   - `App.jsx`: Core application component handling:
     * Authentication state management
     * Routing configuration
     * Global error boundaries

2. **Page Components**:
   - Admin Dashboard (`/admin/*`):
     * College management interface
     * User approval workflows
     * System analytics
   - Student Portal (`/student/*`):
     * Quiz participation
     * Performance tracking
     * Community engagement
   - Teacher Workspace (`/teacher/*`):
     * Quiz creation tools
     * Class management
     * Student progress monitoring
   - Community Hub (`/community`):
     * Art gallery submissions
     * Spotlight nominations
     * Discussion forums

3. **Core Components**:
   - `DashboardLayout.jsx`: Provides consistent UI structure with:
     * Responsive navigation
     * Role-based content areas
     * Theming support
   - `Sidebar.jsx`: Dynamic navigation component that:
     * Adapts to user role
     * Highlights active routes
     * Collapsible for mobile
   - `Upload.jsx`: Handles file uploads with:
     * Drag-and-drop interface
     * File type validation
     * Progress indicators

4. **State Management**:
   - `useAuthStore.js`: Manages:
     * JWT token storage
     * User role permissions
     * Session timeout handling
   - `useSocketStore.js`: Controls:
     * WebSocket connections
     * Real-time notifications
     * Chat message queuing
   - `useCollegeStore.js`: Maintains:
     * College/department hierarchy
     * Section assignments
     * Subject mappings

### Server-Side Architecture (Node.js/Express Backend)

The backend is built using Express.js with MongoDB via Mongoose, following a modular MVC pattern:

1. **Core Server Setup** (`server/index.js`):
   - Express application configuration
   - Middleware stack including:
     * Body parsing
     * CORS handling
     * Authentication
     * Request logging
   - Database connection setup
   - WebSocket server initialization
   - Route mounting

2. **Controller Layer**:
   - Authentication (`authController.js`):
     * JWT token generation/validation
     * Password hashing (bcrypt)
     * Role-based access control
   - Quiz System (`Quizz/`):
     * AI question generation integration
     * Quiz session management
     * Answer evaluation
   - Community Features (`community/`):
     * Content moderation workflows
     * Approval/rejection handling
     * Notification triggers
   - Chat System (`chat/`):
     * Message persistence
     * Group management
     * Real-time delivery

3. **Data Models**:
   - User Models (`UserModel/`):
     * Polymorphic schema design for different roles
     * Virtual population for relationships
     * Password encryption hooks
   - Quiz Models (`Quizz/`):
     * Question-answer relationships
     * Submission tracking
     * Scoring algorithms
   - Community Models (`community/`):
     * Media storage references
     * Approval status tracking
     * User engagement metrics

4. **Route Handling**:
   - RESTful API design
   - Versioned endpoints (`/api/v1/`)
   - Rate limiting on public routes
   - Input validation middleware
   - Error handling standardization

## Key Features Implementation

### 1. Authentication System

#### Core Components:
- **JWT Token Management**:
  - Access tokens (15min expiry) + refresh tokens (7day expiry)
  - Secure HTTP-only cookies for token storage
  - Automatic token refresh mechanism
  - Blacklist for revoked tokens

- **Role-Based Access Control**:
  - Hierarchical permissions:
    * CollegeAdmin → Teacher → Student
  - Middleware validation for protected routes
  - Dynamic permission checking

- **Registration Flows**:
  - CollegeAdmin: Manual approval by system
  - Teacher: Requires college association
  - Student: Self-registration with email verification

#### Implementation Details:
- **Password Security**:
  - bcrypt hashing (12 rounds)
  - Minimum 8 character complexity requirements
  - Account lockout after 5 failed attempts

- **Session Management**:
  - Device fingerprinting
  - Concurrent session control
  - Automatic timeout after 30min inactivity

- **Models**:
  - CollegeAdmin: `server/models/UserModel/collegeAdmin/collegeAdminModel.js`
    * Manages college-level permissions
    * Can create departments/sections
  - Teacher: `server/models/UserModel/Teachers/teacherModel.js`
    * Subject-specific permissions
    * Quiz creation rights
  - Student: `server/models/UserModel/Students/StudentModel.js`
    * Section-based access
    * Community participation rights

#### Security Features:
- CSRF protection
- Rate limiting on auth endpoints
- Secure password reset flow
- Login activity logging

### 2. Quiz System

#### Core Components:
- **AI-Powered Generation**:
  - Integration with OpenAI API
  - Context-aware question formulation
  - Difficulty level customization
  - Automatic answer validation

- **Quiz Session Management**:
  - Real-time participation tracking
  - Timer-based question progression
  - Instant scoring and feedback
  - Performance analytics dashboard

#### Implementation Details:
- **Question Types**:
  - Multiple choice (single/multi-select)
  - True/False
  - Short answer (AI-evaluated)
  - Image-based questions

- **Models**:
  - Quiz (`server/models/Quizz/quizModel.js`):
    * Metadata (title, description, duration)
    * Subject/topic associations
    * Access control settings
  - QuizQuestion (`server/models/Quizz/QuizQuestionModel.js`):
    * Question text and options
    * Correct answer mapping
    * Difficulty scoring
    * AI generation parameters
  - SubmitQuiz (`server/models/Quizz/SubmitQuizModel.js`):
    * Student responses
    * Scoring breakdown
    * Time tracking
    * Performance analytics

- **Workflow**:
  1. Teacher creates quiz template
  2. AI generates questions based on parameters
  3. Teacher reviews/edits questions
  4. Quiz assigned to sections
  5. Students complete quiz in session
  6. Instant results and analytics

#### Technical Features:
- Real-time updates via WebSocket
- Anti-cheating measures:
  - Random question ordering
  - Option shuffling
  - Session monitoring
- Bulk question import/export
- Version history for quizzes

#### API Endpoints:
- POST /api/quizzes/generate - AI question generation
- GET /api/quizzes/active - Current active quizzes
- POST /api/quizzes/submit - Quiz submission
- GET /api/quizzes/analytics/:quizId - Performance data

### 3. Community Features
#### Art Gallery
- Model: `server/models/community/artGallery/artGalleryModel.js`
- Routes: `server/routes/community/artgalleryRoutes.js`
- Status workflow: pending → approved/rejected

#### Spotlight
- Model: `server/models/community/spotlight/spotlightModel.js`
- Routes: `server/routes/community/spotlightRoutes.js`
- Similar approval workflow as Art Gallery

### 4. Chat System
- Models:
  - ChatGroup: `server/models/ChatGroup/ChatGroupModel.js`
  - Message: `server/models/ChatGroup/messageModel.js`
- Socket implementation: `server/socket.js`
- Routes: `server/routes/chatgroup/chatRoutes.js`

## Database Schema Highlights

### User Models
- CollegeAdmin: Manages colleges and departments
- Teacher: Teaches subjects, creates quizzes
- Student: Takes quizzes, participates in community

### Quiz Models
- Quiz: Contains metadata about quizzes
- QuizQuestion: Stores individual questions
- SubmitQuiz: Tracks student submissions

### Community Models
- ArtGallery: For sharing artistic works
- Spotlight: For highlighting student/teacher achievements

## Important Services

### Quiz Generation Service
- Location: `server/services/quizGenerationService.js`
- Uses AI to generate quiz questions
- Integrates with subject/topic system

### Socket Service
- Location: `server/socket.js`
- Handles real-time chat functionality
- Manages online status and notifications

## API Endpoints

### Auth Routes
- POST /api/auth/register/[admin|teacher|student]
- POST /api/auth/login
- GET /api/auth/verify

### Quiz Routes
- GET /api/quizzes/stats/:teacherId
- GET /api/quizzes/teacher/
- GET /api/quizzes/:quizId
- GET /api/quizzes/quizlist/section/

### Community Routes
- GET /api/community/artgallery
- POST /api/community/artgallery/upload
- GET /api/community/artgallery/pending
- PATCH /api/community/artgallery/:id/status

## Frontend Architecture

### State Management
- Uses React context and custom hooks
- Key stores:
  - Auth: Manages user authentication state
  - Socket: Handles real-time connections
  - College: Manages college/department data

### Key Components
- DashboardLayout: Main application layout
- Sidebar: Navigation component
- Upload: Handles file uploads for community features

## Deployment Considerations
- Requires MongoDB database
- Cloudinary integration for image uploads
- Socket.io for real-time features
- Environment variables needed for:
  - JWT secret
  - Cloudinary credentials
  - Database connection
